DynamicImage is a rails engine providing transparent uploading, resizing 
and processing on the fly, and caching of image files.


== Requirements:

* Ruby on Rails 1.2.x+ (http://www.rubyonrails.org/)
* Engines              (http://www.rails-engines.org/)
* RMagick              (http://rubyforge.org/projects/rmagick/)

DynamicImage is targetting both Rails 1.2.x and 2.x, and should be 
compatible with both. Earlier versions might work, but haven't been tested.


== Note:

DynamicImage uses two tables, <tt>images</tt> and <tt>binaries</tt>. 
Please make sure these don't clash with your current database schema.
If they do, you need to do your own migrations.


== Installation:

You can install the plugin from github:

  script/plugin install git://github.com/elektronaut/dynamic_image.git

Once the plugin is installed, you need to create the database tables:

  script/generate plugin_migration dynamic_image
  rake db:migrate

The routes also need to be hooked up, add the following line somewhere in
your config/routes.rb file:

  map.from_plugin :dynamic_image


== Usage:

=== Uploading an image

Creating a new image from an uploaded file is simple, here's some 
example view code:

  <% form_for 'image', Image.new, :html => {:multipart => true} do |f| %>
    Name: <%= f.text_filed :name %>
    File: <%= f.file_field :imagefile %>
    <%= submit_tag "Upload" %>
  <% end %>

And for the controller:

  @image = Image.create(params[:image])


=== Displaying an image

Use the <tt>dynamic_image_tag</tt> helper in your views to display an image,
for example:

  <%= dynamic_image_tag @user.avatar, :size => '64x64' %>
  <%= dynamic_image_tag @user.avatar, :size => '150x', :filterset => 'dropshadow' %>

See <tt>ApplicationHelper.dynamic_image_tag</tt> for more info.


=== Associations

Using the <tt>belongs_to_image</tt> macro enables you to set an image directly 
from an uploaded file. Example:

  class User
    belongs_to_image :avatar
  end

Refer to <tt>ActiveRecord::Associations::ClassMethods</tt> for documentation.


=== Filtersets

Filtersets provide an easy way to process your thumbnails through ImageMagick. 
You can create multiple filtersets, and use them in a 
<tt>dynamic_image_tag</tt> with the <tt>:filterset</tt> option. They are 
documented in <tt>DynamicImage::Filterset</tt>.


== Caching:

Processing images on the fly is expensive. Therefore, page caching is enabled
by default, even in development mode. To disable page caching, add the following
line in your initializers or environment.rb:

	DynamicImage.page_caching = false
	
